dataset_rfm <- result %>%
rename(
customer_id = nome_corretor,
order_date = data_pagamento_comissao,
revenue = valor_base
)
dataset_rfm$revenue_log <- log(dataset_rfm$revenue)
outliers_revenue_log <- boxplot.stats(dataset_rfm$revenue_log)$out
dataset_rfm <- dataset_rfm[!dataset_rfm$revenue_log %in% outliers_revenue_log, ]
#dataset_rfm <- na.omit(dataset_rfm)
# definindo data parâmetro para calculo da recência
data_base <- Sys.Date()
# transformando dados em tabela RFM
rfm_df <- rfm_table_order(
data = dataset_rfm,
customer_id = customer_id,
order_date = order_date,
#revenue = revenue_log,
revenue = revenue,
analysis_date = data_base
)
# Calculando segmentação
segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
"New Customers", "Promising", "Need Attention", "About To Sleep",
"At Risk", "Can't Lose Them", "Lost")
# Parâmetros para a classificação
recency_lower <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
# Aplicando segmentação
segment_data_analitcs <- rfm_segment(rfm_df, segment_names, recency_lower, recency_upper,
frequency_lower, frequency_upper, monetary_lower, monetary_upper)
#obtendo resumo
segment_overview_segment_chart <- rfm_segment_summary(segment_data_analitcs)
# Adicionando definição e recomentação
segment_overview_segment_chart <- segment_overview_segment_chart %>%
mutate(
definicao =
case_when(
segment == "About To Sleep" ~ 'Parceiros que estão prestes a se tornar inativos. Eles podem ter digitado recentemente, mas a frequência de sua digitação está diminuindo, e se não forem incentivados, poderão deixar de digitar novamente.',
segment == "Need Attention" ~ 'parceiros que são regulares, mas apresentam sinais de desinteresse. Eles podem ter diminuído a frequência de digitação, mas ainda são valiosos',
segment == "At Risk" ~ 'Parceiros que costumavam digitar regularmente, mas sua recência diminuiu significativamente. Esses parceiros não digitam há um tempo, mas ainda têm um histórico de digitação significativo.',
segment == "Lost" ~ 'Parceiros que têm um histórico de digitação passado, mas que não digitaram há muito tempo. Eles são parceiros que desapareceram e não interagem mais com a empresa.',
segment == "Potential Loyalist" ~ 'Parceiros que têm potencial para se tornar leais, mas ainda não atingiram a frequência ou valor monetário dos “Loyal Customers”. Eles digitam com certa regularidade, mas têm potencial para se tornar mais valiosos.',
segment == "Others" ~ 'Este é um segmento genérico que abrange parceiros que não se encaixam bem em nenhum dos outros grupos. Pode incluir parceiros que não se encaixam em termos de recência, frequência ou valor monetário de forma consistente.',
segment == "Loyal Customers" ~ 'Parceiros que digitam frequentemente, mas não geram tanto quanto os “Champions”. Eles são fiéis à empresa, mas não estão no topo em termos de volume de receita.',
segment == "Champions" ~ 'São os melhores parceiros. Eles digitam com frequência, geram muito dinheiro e têm um bom histórico de digitação recentes. Esses parceiros são altamente leais.'
)
)
segment_overview_segment_chart <- segment_overview_segment_chart %>%
mutate(
recomendacao =
case_when(
segment == "About To Sleep" ~ 'Ação de reengajamento urgente, como promoções especiais ou lembretes para manter o parceiro engajado.',
segment == "Need Attention" ~ 'Interações personalizadas, como e-mails ou ofertas, para lembrar os parceiros do valor da empresa e incentivá-los a continuar comprando.',
segment == "At Risk" ~ 'Oferecer promoções personalizadas ou descontos para tentar trazê-los de volta antes que se tornem inativos completamente.',
segment == "Lost" ~ 'Estratégias de reconquista, como campanhas de reengajamento ou ofertas direcionadas.',
segment == "Potential Loyalist" ~ 'Estímulos para incentivá-los a digitar mais frequentemente, como recompensas de fidelidade ou incentivos adicionais.',
segment == "Others" ~ 'Análise mais aprofundada para tentar identificar o comportamento desses parceiros e encontrar maneiras de engajá-los.',
segment == "Loyal Customers" ~ 'Propor ações de fidelização, como comissões especiais para grandes lotes de digitação ou incentivos para aumentar o valor das propostas.',
segment == "Champions" ~ 'Focar em programas de fidelidade e recompensas para manter esse grupo de parceiros feliz e incentivá-los a continuar comprando.'
)
)
library(lubridate)
library(ggsankey)
library(forcats)
library(ggplot2)
# renomeando colunas
data_loop <- result %>%
select(nome_corretor, data_pagamento_comissao, valor_base) %>%
rename(
customer_id = nome_corretor,
order_date = data_pagamento_comissao,
revenue = valor_base
)
data_loop <- data_loop %>%
mutate(ano = year(order_date),
mes = month(order_date),
ultimo_dia_mes = as.Date(paste(ano, mes, "01", sep = "-")) %m+% months(1) - days(1))
data_loop <- data_loop %>%
group_by(customer_id, ano, mes) %>%
summarise(
recencia = as.integer(ultimo_dia_mes - max(order_date)),
frequencia = n(),
monetary = sum(revenue),
.groups = 'drop'
)
data_loop <- data_loop %>%
arrange(customer_id, ano, mes)
data_loop <- unique(data_loop)
data_loop$monetary_log <- log(data_loop$monetary)
data_loop <- na.omit(data_loop)
# definindo scores
data_loop <- data_loop %>%
group_by(ano, mes) %>%
mutate(
recency_score = ntile(-recencia, 5),
frequency_score = ntile(frequencia, 5),
monetary_score = ntile(monetary_log, 5),
rfm = paste0(recency_score, frequency_score, monetary_score)
)
# Classificando segmentos
segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
"New Customers", "Promising", "Need Attention", "About To Sleep",
"At Risk", "Can't Lose Them", "Lost")
recency_lower   <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper   <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower  <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper  <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
n_segments <- length(segment_names)
rfm_score_table_ribon_chart <- data_loop
rfm_score_table_ribon_chart$segment <- NA
for (i in seq_len(n_segments)) {
rfm_score_table_ribon_chart$segment[((rfm_score_table_ribon_chart$recency_score %>%
between(recency_lower[i], recency_upper[i])) & (rfm_score_table_ribon_chart$frequency_score %>%
between(frequency_lower[i], frequency_upper[i])) &
(rfm_score_table_ribon_chart$monetary_score %>% between(monetary_lower[i],
monetary_upper[i])) & !rfm_score_table_ribon_chart$segment %in%
segment_names)] <- segment_names[i]
}
rfm_score_table_ribon_chart$segment[is.na(rfm_score_table_ribon_chart$segment)] <- "Others"
rfm_score_table_ribon_chart$segment[rfm_score_table_ribon_chart$segment == 1] <- "Others"
shiny::runApp()
runApp()
library(lubridate)
library(ggsankey)
library(forcats)
library(ggplot2)
# renomeando colunas
data_loop <- result %>%
select(nome_corretor, data_pagamento_comissao, valor_base) %>%
rename(
customer_id = nome_corretor,
order_date = data_pagamento_comissao,
revenue = valor_base
)
data_loop <- data_loop %>%
mutate(ano = year(order_date),
mes = month(order_date),
ultimo_dia_mes = as.Date(paste(ano, mes, "01", sep = "-")) %m+% months(1) - days(1))
data_loop <- data_loop %>%
group_by(customer_id, ano, mes) %>%
summarise(
recencia = as.integer(ultimo_dia_mes - max(order_date)),
frequencia = n(),
monetary = sum(revenue),
.groups = 'drop'
)
data_loop <- data_loop %>%
arrange(customer_id, ano, mes)
data_loop <- unique(data_loop)
data_loop$monetary_log <- log(data_loop$monetary)
data_loop <- na.omit(data_loop)
# definindo scores
data_loop <- data_loop %>%
group_by(ano, mes) %>%
mutate(
recency_score = ntile(-recencia, 5),
frequency_score = ntile(frequencia, 5),
monetary_score = ntile(monetary_log, 5),
rfm = paste0(recency_score, frequency_score, monetary_score)
)
# Classificando segmentos
segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
"New Customers", "Promising", "Need Attention", "About To Sleep",
"At Risk", "Can't Lose Them", "Lost")
recency_lower   <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper   <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower  <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper  <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
n_segments <- length(segment_names)
rfm_score_table_ribon_chart <- data_loop
rfm_score_table_ribon_chart$segment <- NA
for (i in seq_len(n_segments)) {
rfm_score_table_ribon_chart$segment[((rfm_score_table_ribon_chart$recency_score %>%
between(recency_lower[i], recency_upper[i])) & (rfm_score_table_ribon_chart$frequency_score %>%
between(frequency_lower[i], frequency_upper[i])) &
(rfm_score_table_ribon_chart$monetary_score %>% between(monetary_lower[i],
monetary_upper[i])) & !rfm_score_table_ribon_chart$segment %in%
segment_names)] <- segment_names[i]
}
rfm_score_table_ribon_chart$segment[is.na(rfm_score_table_ribon_chart$segment)] <- "Others"
rfm_score_table_ribon_chart$segment[rfm_score_table_ribon_chart$segment == 1] <- "Others"
rfm_score_table_ribon_chart
data_loop
segment_overview_segment_chart
options(warn = -1)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
#carrega dados - carregar a partir do postgre
# definir conector
library(RPostgres)
library(DBI)
readRenviron("./.Renviron")
con <- dbConnect(RPostgres::Postgres(),
dbname = Sys.getenv('DB_NAME'),
host = Sys.getenv('DB_HOST'),
port = 5432,
user = Sys.getenv('DB_USER'),
password = Sys.getenv('DB_PASSWORD'))
query <- '
select ct."data_pagamento_comissao", ct."valor_base", co.*
from public.contrato ct
left join cliente_multiloja climul on climul."id_cliente_multiloja" = ct."id_cliente_multiloja"
left join cliente_corretor clicor on clicor."id_cliente_corretor" = climul."id_cliente_corretor"
left join corretor co on co."id_corretor" = clicor."id_corretor"
left join public.banco_orgao banorg on banorg."id_banco_orgao" = ct."id_banco_orgao"
left join public.tabela_banco tabban on tabban."id_tabela_banco" = banorg."id_tabela_banco"
where tabban."id_banco" = 3
and data_pagamento_comissao between \'2024-06-01\' and \'2025-03-31\'
'
result <- dbGetQuery(con, query)
dbDisconnect(con)
#biblioteca
library(rfm)
#definindo dataset rfm
dataset_rfm <- result %>%
rename(
customer_id = nome_corretor,
order_date = data_pagamento_comissao,
revenue = valor_base
)
dataset_rfm$revenue_log <- log(dataset_rfm$revenue)
outliers_revenue_log <- boxplot.stats(dataset_rfm$revenue_log)$out
dataset_rfm <- dataset_rfm[!dataset_rfm$revenue_log %in% outliers_revenue_log, ]
#dataset_rfm <- na.omit(dataset_rfm)
# definindo data parâmetro para calculo da recência
data_base <- Sys.Date()
# transformando dados em tabela RFM
rfm_df <- rfm_table_order(
data = dataset_rfm,
customer_id = customer_id,
order_date = order_date,
revenue = revenue_log,
#revenue = revenue,
analysis_date = data_base
)
shiny::runApp()
options(warn = -1)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
#carrega dados - carregar a partir do postgre
# definir conector
library(RPostgres)
library(DBI)
readRenviron("./.Renviron")
con <- dbConnect(RPostgres::Postgres(),
dbname = Sys.getenv('DB_NAME'),
host = Sys.getenv('DB_HOST'),
port = 5432,
user = Sys.getenv('DB_USER'),
password = Sys.getenv('DB_PASSWORD'))
query <- '
select ct."data_pagamento_comissao", ct."valor_base", co."nome_corretor", co."funcionario_cidade", co."uf", co."lat", co."lon"
from public.contrato ct
left join cliente_multiloja climul on climul."id_cliente_multiloja" = ct."id_cliente_multiloja"
left join cliente_corretor clicor on clicor."id_cliente_corretor" = climul."id_cliente_corretor"
left join corretor co on co."id_corretor" = clicor."id_corretor"
left join public.banco_orgao banorg on banorg."id_banco_orgao" = ct."id_banco_orgao"
left join public.tabela_banco tabban on tabban."id_tabela_banco" = banorg."id_tabela_banco"
where tabban."id_banco" = 3
and data_pagamento_comissao between \'2024-06-01\' and \'2025-03-31\'
'
result <- dbGetQuery(con, query)
dbDisconnect(con)
#biblioteca
library(rfm)
#definindo dataset rfm
dataset_rfm <- result %>%
rename(
customer_id = nome_corretor,
order_date = data_pagamento_comissao,
revenue = valor_base
)
dataset_rfm$revenue_log <- log(dataset_rfm$revenue)
outliers_revenue_log <- boxplot.stats(dataset_rfm$revenue_log)$out
dataset_rfm <- dataset_rfm[!dataset_rfm$revenue_log %in% outliers_revenue_log, ]
dataset_rfm <- dataset_rfm[!is.na(dataset_rfm$revenue_log), ]
#dataset_rfm <- na.omit(dataset_rfm)
# definindo data parâmetro para calculo da recência
data_base <- Sys.Date()
colSums(is.na(dataset_rfm))
# transformando dados em tabela RFM
rfm_df <- rfm_table_order(
data = dataset_rfm,
customer_id = customer_id,
order_date = order_date,
revenue = revenue_log,
#revenue = revenue,
analysis_date = data_base
)
# Calculando segmentação
segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
"New Customers", "Promising", "Need Attention", "About To Sleep",
"At Risk", "Can't Lose Them", "Lost")
# Parâmetros para a classificação
recency_lower <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
# Aplicando segmentação
segment_data_analitcs <- rfm_segment(rfm_df, segment_names, recency_lower, recency_upper,
frequency_lower, frequency_upper, monetary_lower, monetary_upper)
#obtendo resumo
segment_overview_segment_chart <- rfm_segment_summary(segment_data_analitcs)
# Adicionando definição e recomentação
segment_overview_segment_chart <- segment_overview_segment_chart %>%
mutate(
definicao =
case_when(
segment == "About To Sleep" ~ 'Parceiros que estão prestes a se tornar inativos. Eles podem ter digitado recentemente, mas a frequência de sua digitação está diminuindo, e se não forem incentivados, poderão deixar de digitar novamente.',
segment == "Need Attention" ~ 'parceiros que são regulares, mas apresentam sinais de desinteresse. Eles podem ter diminuído a frequência de digitação, mas ainda são valiosos',
segment == "At Risk" ~ 'Parceiros que costumavam digitar regularmente, mas sua recência diminuiu significativamente. Esses parceiros não digitam há um tempo, mas ainda têm um histórico de digitação significativo.',
segment == "Lost" ~ 'Parceiros que têm um histórico de digitação passado, mas que não digitaram há muito tempo. Eles são parceiros que desapareceram e não interagem mais com a empresa.',
segment == "Potential Loyalist" ~ 'Parceiros que têm potencial para se tornar leais, mas ainda não atingiram a frequência ou valor monetário dos “Loyal Customers”. Eles digitam com certa regularidade, mas têm potencial para se tornar mais valiosos.',
segment == "Others" ~ 'Este é um segmento genérico que abrange parceiros que não se encaixam bem em nenhum dos outros grupos. Pode incluir parceiros que não se encaixam em termos de recência, frequência ou valor monetário de forma consistente.',
segment == "Loyal Customers" ~ 'Parceiros que digitam frequentemente, mas não geram tanto quanto os “Champions”. Eles são fiéis à empresa, mas não estão no topo em termos de volume de receita.',
segment == "Champions" ~ 'São os melhores parceiros. Eles digitam com frequência, geram muito dinheiro e têm um bom histórico de digitação recentes. Esses parceiros são altamente leais.'
)
)
segment_overview_segment_chart <- segment_overview_segment_chart %>%
mutate(
recomendacao =
case_when(
segment == "About To Sleep" ~ 'Ação de reengajamento urgente, como promoções especiais ou lembretes para manter o parceiro engajado.',
segment == "Need Attention" ~ 'Interações personalizadas, como e-mails ou ofertas, para lembrar os parceiros do valor da empresa e incentivá-los a continuar comprando.',
segment == "At Risk" ~ 'Oferecer promoções personalizadas ou descontos para tentar trazê-los de volta antes que se tornem inativos completamente.',
segment == "Lost" ~ 'Estratégias de reconquista, como campanhas de reengajamento ou ofertas direcionadas.',
segment == "Potential Loyalist" ~ 'Estímulos para incentivá-los a digitar mais frequentemente, como recompensas de fidelidade ou incentivos adicionais.',
segment == "Others" ~ 'Análise mais aprofundada para tentar identificar o comportamento desses parceiros e encontrar maneiras de engajá-los.',
segment == "Loyal Customers" ~ 'Propor ações de fidelização, como comissões especiais para grandes lotes de digitação ou incentivos para aumentar o valor das propostas.',
segment == "Champions" ~ 'Focar em programas de fidelidade e recompensas para manter esse grupo de parceiros feliz e incentivá-los a continuar comprando.'
)
)
library(lubridate)
library(ggsankey)
library(forcats)
library(ggplot2)
# renomeando colunas
data_loop <- result %>%
select(nome_corretor, data_pagamento_comissao, valor_base) %>%
rename(
customer_id = nome_corretor,
order_date = data_pagamento_comissao,
revenue = valor_base
)
data_loop$revenue_log <- log(data_loop$revenue)
data_loop <- data_loop %>%
mutate(ano = year(order_date),
mes = month(order_date),
ultimo_dia_mes = as.Date(paste(ano, mes, "01", sep = "-")) %m+% months(1) - days(1))
data_loop <- data_loop %>%
group_by(customer_id, ano, mes) %>%
summarise(
recencia = as.integer(ultimo_dia_mes - max(order_date)),
frequencia = n(),
monetary = sum(revenue_log),
.groups = 'drop'
)
data_loop <- data_loop %>%
arrange(customer_id, ano, mes)
data_loop <- unique(data_loop)
data_loop$monetary_log <- log(data_loop$monetary)
data_loop <- na.omit(data_loop)
# definindo scores
data_loop <- data_loop %>%
group_by(ano, mes) %>%
mutate(
recency_score = ntile(-recencia, 5),
frequency_score = ntile(frequencia, 5),
monetary_score = ntile(monetary_log, 5),
rfm = paste0(recency_score, frequency_score, monetary_score)
)
# Classificando segmentos
segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
"New Customers", "Promising", "Need Attention", "About To Sleep",
"At Risk", "Can't Lose Them", "Lost")
recency_lower   <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper   <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower  <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper  <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
n_segments <- length(segment_names)
rfm_score_table_ribon_chart <- data_loop
rfm_score_table_ribon_chart$segment <- NA
for (i in seq_len(n_segments)) {
rfm_score_table_ribon_chart$segment[((rfm_score_table_ribon_chart$recency_score %>%
between(recency_lower[i], recency_upper[i])) & (rfm_score_table_ribon_chart$frequency_score %>%
between(frequency_lower[i], frequency_upper[i])) &
(rfm_score_table_ribon_chart$monetary_score %>% between(monetary_lower[i],
monetary_upper[i])) & !rfm_score_table_ribon_chart$segment %in%
segment_names)] <- segment_names[i]
}
rfm_score_table_ribon_chart$segment[is.na(rfm_score_table_ribon_chart$segment)] <- "Others"
rfm_score_table_ribon_chart$segment[rfm_score_table_ribon_chart$segment == 1] <- "Others"
shiny::runApp()
shiny::runApp()
runApp()
options(warn = -1)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
#carrega dados - carregar a partir do postgre
# definir conector
library(RPostgres)
library(DBI)
readRenviron("./.Renviron")
con <- dbConnect(RPostgres::Postgres(),
dbname = Sys.getenv('DB_NAME'),
host = Sys.getenv('DB_HOST'),
port = 5432,
user = Sys.getenv('DB_USER'),
password = Sys.getenv('DB_PASSWORD'))
query <- '
select ct."data_pagamento_comissao", ct."valor_base", co."nome_corretor", co."funcionario_cidade", co."uf", co."lat", co."lon"
from public.contrato ct
left join cliente_multiloja climul on climul."id_cliente_multiloja" = ct."id_cliente_multiloja"
left join cliente_corretor clicor on clicor."id_cliente_corretor" = climul."id_cliente_corretor"
left join corretor co on co."id_corretor" = clicor."id_corretor"
left join public.banco_orgao banorg on banorg."id_banco_orgao" = ct."id_banco_orgao"
left join public.tabela_banco tabban on tabban."id_tabela_banco" = banorg."id_tabela_banco"
where tabban."id_banco" = 3
and data_pagamento_comissao between \'2024-06-01\' and \'2025-03-31\'
'
result <- dbGetQuery(con, query)
dbDisconnect(con)
library(lubridate)
library(ggsankey)
library(forcats)
library(ggplot2)
# renomeando colunas
data_loop <- result %>%
select(nome_corretor, data_pagamento_comissao, valor_base) %>%
rename(
customer_id = nome_corretor,
order_date = data_pagamento_comissao,
revenue = valor_base
)
data_loop$revenue_log <- log(data_loop$revenue)
data_loop <- data_loop %>%
mutate(ano = year(order_date),
mes = month(order_date),
ultimo_dia_mes = as.Date(paste(ano, mes, "01", sep = "-")) %m+% months(1) - days(1))
data_loop <- data_loop %>%
group_by(customer_id, ano, mes) %>%
summarise(
recencia = as.integer(ultimo_dia_mes - max(order_date)),
frequencia = n(),
monetary = sum(revenue_log),
.groups = 'drop'
)
data_loop <- data_loop %>%
arrange(customer_id, ano, mes)
data_loop <- unique(data_loop)
data_loop$monetary_log <- log(data_loop$monetary)
data_loop <- na.omit(data_loop)
# definindo scores
data_loop <- data_loop %>%
group_by(ano, mes) %>%
mutate(
recency_score = ntile(-recencia, 5),
frequency_score = ntile(frequencia, 5),
monetary_score = ntile(monetary_log, 5),
rfm = paste0(recency_score, frequency_score, monetary_score)
)
# Classificando segmentos
segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
"New Customers", "Promising", "Need Attention", "About To Sleep",
"At Risk", "Can't Lose Them", "Lost")
recency_lower   <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper   <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower  <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper  <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
n_segments <- length(segment_names)
rfm_score_table_ribon_chart <- data_loop
rfm_score_table_ribon_chart$segment <- NA
for (i in seq_len(n_segments)) {
rfm_score_table_ribon_chart$segment[((rfm_score_table_ribon_chart$recency_score %>%
between(recency_lower[i], recency_upper[i])) & (rfm_score_table_ribon_chart$frequency_score %>%
between(frequency_lower[i], frequency_upper[i])) &
(rfm_score_table_ribon_chart$monetary_score %>% between(monetary_lower[i],
monetary_upper[i])) & !rfm_score_table_ribon_chart$segment %in%
segment_names)] <- segment_names[i]
}
rfm_score_table_ribon_chart$segment[is.na(rfm_score_table_ribon_chart$segment)] <- "Others"
rfm_score_table_ribon_chart$segment[rfm_score_table_ribon_chart$segment == 1] <- "Others"
rfm_score_table_ribon_chart
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
